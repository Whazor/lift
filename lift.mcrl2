sort Verdieping = struct etage_1 | etage_2 | etage_3 | etage_4; % | etage_5 | etage_6;
map niet_verder : Verdieping # Richting  -> Bool;

% TODO: refactor
eqn niet_verder(etage_1, beneden) = true;
eqn niet_verder(etage_1, boven) = false;
eqn niet_verder(etage_2, boven) = false;
eqn niet_verder(etage_2, beneden) = false;
eqn niet_verder(etage_3, boven) = false;
eqn niet_verder(etage_3, beneden) = false;
eqn niet_verder(etage_4, beneden) = false;
eqn niet_verder(etage_4, boven) = true;

eqn etage_1 < etage_2 = true;
eqn etage_2 < etage_3 = true;
eqn etage_3 < etage_4 = true;

sort Richting = struct boven | beneden;

map next: Verdieping # Richting -> Verdieping;
%map prev: Verdieping -> Verdieping;
%eqn next(etage_1) = etage_2;eqn next(etage_2) = etage_3;eqn next(etage_3) = etage_4;eqn next(etage_4) = etage_4;
eqn next(etage_1,boven) = etage_2;eqn next(etage_2,boven) = etage_3;eqn next(etage_3,boven) = etage_4;eqn next(etage_4,boven) = etage_4;
eqn next(etage_1,beneden) = etage_1;eqn next(etage_2,beneden) = etage_1;eqn next(etage_3,beneden) = etage_2;eqn next(etage_4,beneden) = etage_3;
%eqn prev(etage_1) = etage_1;eqn prev(etage_2) = etage_1;eqn prev(etage_3) = etage_2;eqn prev(etage_4) = etage_3;

%sort NVerdieping = struct nergens | ergens(Verdieping);

sort Versnelling = struct stilstaan | constant;
sort Deur = struct open | gesloten;


act deursensor_trigger;
  lift_benadert: Verdieping;
  lift_deur_open;
  lift_deur_dicht;
  verdieping_deur_open: Verdieping;
  verdieping_deur_dicht: Verdieping;
  accelereer: Richting;
  vertraag;
  verdieping_verzoek: Verdieping;
  knop_trigger_sos;
  knop_stop_sos;
  knop_deur_open;
  knop_deur_dicht;
  lift_oproep: Verdieping;
  % tussen schachtmotor en strategie
  s_stop_bij, r_stop_bij, c_stop_bij: Verdieping;
  s_gaan, r_gaan, c_gaan: Richting;
  s_accelereer, r_accelereer, c_accelereer;
  % schachtmotor, deuren en strategie
  s_stilstaan, r_stilstaan1, r_stilstaan2, c_stilstaan: Verdieping;
  % schachtmotor en deuren
  s_lift_deur_open, r_lift_deur_open, c_lift_deur_open;
  s_lift_deur_dicht, r_lift_deur_dicht, c_lift_deur_dicht;
  % beheerpaneel
  s_verzoek_afgehandeld, r_verzoek_afgehandeld, c_verzoek_afgehandeld;
  s_verdieping_verzoek, r_verdieping_verzoek, c_verdieping_verzoek;
  s_lift_oproep, r_lift_oproep, c_lift_oproep;

%%%%%%%
  proc
    BeheerPaneel(tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling) =
    	sum v:Verdieping.lift_oproep(v).BeheerPaneel(tedoen = tedoen + {v}) +
    	sum v:Verdieping.verdieping_verzoek(v).BeheerPaneel(tedoen = tedoen + {v});

%%%%%%%

proc DeurenComponent(versnelling: Versnelling, deur: Deur, verdieping: Verdieping) =
  	knop_deur_open . (versnelling == stilstaan && deur == gesloten) -> lift_deur_open . verdieping_deur_open(verdieping) . DeurenComponent(deur=open) <> DeurenComponent() +
  	knop_deur_dicht . (versnelling == stilstaan && deur == open) -> lift_deur_dicht . verdieping_deur_dicht(verdieping) . DeurenComponent(deur=gesloten) <> DeurenComponent() +
    r_accelereer . DeurenComponent(versnelling=constant) +
    sum v: Verdieping . r_stilstaan2(v) . lift_deur_open . verdieping_deur_open(v) . DeurenComponent(versnelling=stilstaan,verdieping=v,deur=open);

%%%%%%%

proc StrategieComponent(versnelling: Versnelling, richting: Richting, verdieping:Verdieping) =
    sum v: Verdieping.(versnelling == stilstaan && verdieping != v) -> s_stop_bij(v).s_gaan(if(v < verdieping, beneden, boven)).StrategieComponent(versnelling=constant) +
    (versnelling == constant) -> sum v:Verdieping. r_stilstaan1(v) . StrategieComponent(versnelling=stilstaan, verdieping=v);

%%%%%%%

proc SchachtMotor(gaan:Bool, huidig: Verdieping, stop_bij: Verdieping, deur: Deur, versnelling: Versnelling, richting: Richting) =
    sum new_richting: Richting . r_gaan(new_richting) . SchachtMotor(gaan = true, richting = new_richting)
    + (gaan && versnelling == stilstaan && deur == gesloten) -> accelereer(richting).SchachtMotor(versnelling = constant, richting = richting)
    %+ (versnelling == constant) -> vertraag.SchachtMotor(versnelling = stilstaan)
    + r_lift_deur_open . SchachtMotor(deur = open)
    + r_lift_deur_dicht . SchachtMotor(deur = gesloten)
    % lift_benadert sensor afvangen
    + (versnelling == constant && !niet_verder(huidig, richting)) -> lift_benadert(next(huidig, richting)) .
      % moet stoppen bij juiste verdieping
      (next(huidig, richting) == stop_bij) ->
          vertraag.s_stilstaan(next(huidig, richting)).SchachtMotor(gaan = false, versnelling = stilstaan, huidig=next(huidig, richting))
          <> SchachtMotor(huidig=next(huidig, richting))
    % lift moet altijd stoppen op de hoogste of laagste verdieping
    %+ (versnelling == constant && niet_verder(huidig, richting)) -> vertraag. s_stilstaan(huidig). SchachtMotor(gaan = false, versnelling = stilstaan)
    + sum v:Verdieping . r_stop_bij(v) . SchachtMotor(stop_bij = v);

%%%%%%%
proc LiftController(huidige_verdieping: Verdieping, tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling, deur: Deur) =
  BeheerPaneel(tedoen, richting, versnelling) ||
  DeurenComponent(versnelling, deur, huidige_verdieping) ||
  SchachtMotor(false, huidige_verdieping, huidige_verdieping, deur, versnelling, richting) ||
  StrategieComponent(versnelling, richting, huidige_verdieping);

  init allow({
    deursensor_trigger,
    lift_benadert,
    lift_deur_open,
    lift_deur_dicht,
    verdieping_deur_open,
    verdieping_deur_dicht,
    accelereer,
    vertraag,
    verdieping_verzoek,
    knop_trigger_sos,
    knop_stop_sos,
    knop_deur_open,
    knop_deur_dicht,
    lift_oproep,
    c_stop_bij,
    c_gaan,
    c_stilstaan,
    c_lift_deur_open,
    c_lift_deur_dicht,
    c_verzoek_afgehandeld,
    c_verdieping_verzoek,
    c_lift_oproep},
         comm({
           s_stop_bij|r_stop_bij->c_stop_bij,
           s_gaan|r_gaan->c_gaan,
           s_accelereer|r_accelereer->c_accelereer,
           s_stilstaan|r_stilstaan1|r_stilstaan2->c_stilstaan,
           s_lift_deur_open|r_lift_deur_open->c_lift_deur_open,
           s_lift_deur_dicht|r_lift_deur_dicht->c_lift_deur_dicht,
           s_verzoek_afgehandeld|r_verzoek_afgehandeld->c_verzoek_afgehandeld,
           s_verdieping_verzoek|r_verdieping_verzoek->c_verdieping_verzoek,
           s_lift_oproep|r_lift_oproep->c_lift_oproep},
           LiftController(etage_1, {}, boven, stilstaan, gesloten)
       ));
