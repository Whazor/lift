sort Verdieping = struct etage_1 | etage_2 | etage_3 | etage_4; % | etage_5 | etage_6;
sort Richting = struct boven | beneden;
sort Versnelling = struct stilstaan | constant;
sort Deur = struct open | gesloten;

act deursensor_trigger;
  lift_benadert: Verdieping;
  lift_deur_open;
  lift_deur_dicht;
  verdieping_deur_open: Verdieping;
  verdieping_deur_dicht: Verdieping;
  accelereer: Richting;
  vertraag;
  verdieping_verzoek: Verdieping;
  knop_trigger_sos;
  knop_stop_sos;
  knop_deur_open;
  knop_deur_dicht;
  lift_oproep: Verdieping;
  s_stop_bij: Verdieping;
  r_stop_bij: Verdieping;
  c_stop_bij: Verdieping;


proc StrategyController(versnelling: Versnelling, richting: Richting) =
    (versnelling == stilstaan) -> sum v: Verdieping.lift_benadert(v).s_stop_bij(etage_2).StrategyController() <> StrategyController();

proc SchachtMotor(versnelling: Versnelling, richting: Richting) =
    (versnelling == stilstaan) -> sum r:Richting.accelereer(r).SchachtMotor(versnelling = constant, richting = r) <> SchachtMotor() +
    vertraag.SchachtMotor(versnelling = stilstaan) +
    sum v:Verdieping.r_stop_bij(v).SchachtMotor();

proc DeurController(versnelling: Versnelling, deur: Deur) =
  	knop_deur_open. (versnelling == stilstaan && deur == gesloten) -> lift_deur_open . verdieping_deur_open(etage_1) . DeurController(deur=open) <> DeurController() +
  	knop_deur_dicht. (versnelling == stilstaan && deur == open) -> lift_deur_dicht . verdieping_deur_dicht(etage_1) . DeurController(deur=gesloten) <> DeurController();

proc
  BeheerPaneel(tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling) =
  	sum v:Verdieping.lift_oproep(v).BeheerPaneel(tedoen = tedoen + {v}) +
  	sum v:Verdieping.verdieping_verzoek(v).BeheerPaneel(tedoen = tedoen + {v});

proc LiftController(tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling, deur: Deur) =
  BeheerPaneel(tedoen, richting, versnelling) || DeurController(versnelling, deur);

  init allow({
    deursensor_trigger,
    lift_benadert,
    lift_deur_open,
    lift_deur_dicht,
    verdieping_deur_open,
    verdieping_deur_dicht,
    accelereer,
    vertraag,
    verdieping_verzoek,
    knop_trigger_sos,
    knop_stop_sos,
    knop_deur_open,
    knop_deur_dicht,
    lift_oproep,
    c_stop_bij},
         comm({s_stop_bij|r_stop_bij->c_stop_bij},
           LiftController({}, boven, stilstaan, gesloten)
       ));
