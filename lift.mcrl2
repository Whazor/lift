sort Verdieping = struct etage_1 | etage_2 | etage_3 | etage_4; % | etage_5 | etage_6;
sort Richting = struct boven | beneden;
sort Versnelling = struct stilstaan | versnellen | vertragen | constant;
sort Deur = struct open | gesloten;

act deursensor_trigger;
  lift_benadert: Verdieping;
  lift_deur_open;
  lift_deur_dicht;
  verdieping_deur_open: Verdieping;
  verdieping_deur_dicht: Verdieping;
  accelereer: Richting;
  vertraag;
  verdieping_verzoek: Verdieping;
  knop_trigger_sos;
  knop_stop_sos;
  knop_deur_open;
  knop_deur_dicht;
  lift_oproep: Verdieping;

proc DeurController(versnelling: Versnelling, deur: Deur) =
  	knop_deur_open. (versnelling == stilstaan && deur == gesloten) -> lift_deur_open . verdieping_deur_open(etage_1) . DeurController(deur=open) <> DeurController() +
  	knop_deur_dicht. (versnelling == stilstaan && deur == open) -> lift_deur_dicht . verdieping_deur_dicht(etage_1) . DeurController(deur=gesloten) <> DeurController();

proc
  BeheerPaneel(tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling) =
  	sum v:Verdieping.lift_oproep(v).BeheerPaneel(tedoen = tedoen + {v}) +
  	sum v:Verdieping.verdieping_verzoek(v).BeheerPaneel(tedoen = tedoen + {v});

proc LiftController(tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling, deur: Deur) =
  BeheerPaneel(tedoen, richting, versnelling) || DeurController(versnelling, deur);

init LiftController({}, boven, stilstaan, gesloten);
