sort Verdieping = struct etage_1 | etage_2 | etage_3 | etage_4; % | etage_5 | etage_6;
sort Richting = struct boven | beneden;
sort Versnelling = struct stilstaan | constant;
sort Deur = struct open | gesloten;

act deursensor_trigger;
  lift_benadert: Verdieping;
  lift_deur_open;
  lift_deur_dicht;
  verdieping_deur_open: Verdieping;
  verdieping_deur_dicht: Verdieping;
  accelereer: Richting;
  vertraag;
  verdieping_verzoek: Verdieping;
  knop_trigger_sos;
  knop_stop_sos;
  knop_deur_open;
  knop_deur_dicht;
  lift_oproep: Verdieping;
  % tussen schachtmotor en strategie
  s_stop_bij, r_stop_bij, c_stop_bij: Verdieping;
  s_accelereer, r_accelereer, c_accelereer: Richting;
  % schachtmotor, deuren en strategie
  s_stilstaan, r_stilstaan1, r_stilstaan2, c_stilstaan;
  % schachtmotor en deuren
  s_lift_deur_open, r_lift_deur_open, c_lift_deur_open;
  s_lift_deur_dicht, r_lift_deur_dicht, c_lift_deur_dicht;
  % beheerpaneel
  s_verzoek_afgehandeld, r_verzoek_afgehandeld, c_verzoek_afgehandeld;
  s_verdieping_verzoek, r_verdieping_verzoek, c_verdieping_verzoek;
  s_lift_oproep, r_lift_oproep, c_lift_oproep;
  

proc StrategieComponent(versnelling: Versnelling, richting: Richting) =
    (versnelling == stilstaan) -> sum v: Verdieping.lift_benadert(v).s_stop_bij(etage_2).StrategieComponent();

proc SchachtMotor(huidige_verdieping: Verdieping, stop_bij: Verdieping, versnelling: Versnelling, richting: Richting) =
      (versnelling == stilstaan) -> sum r:Richting.accelereer(r).SchachtMotor(versnelling = constant, richting = r)
    + (versnelling == constant) -> vertraag.SchachtMotor(versnelling = stilstaan)
    + sum v:Verdieping.r_stop_bij(v).SchachtMotor();

proc DeurenComponent(versnelling: Versnelling, deur: Deur) =
  	knop_deur_open. (versnelling == stilstaan && deur == gesloten) -> lift_deur_open . verdieping_deur_open(etage_1) . DeurenComponent(deur=open) <> DeurenComponent() +
  	knop_deur_dicht. (versnelling == stilstaan && deur == open) -> lift_deur_dicht . verdieping_deur_dicht(etage_1) . DeurenComponent(deur=gesloten) <> DeurenComponent();

proc
  BeheerPaneel(tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling) =
  	sum v:Verdieping.lift_oproep(v).BeheerPaneel(tedoen = tedoen + {v}) +
  	sum v:Verdieping.verdieping_verzoek(v).BeheerPaneel(tedoen = tedoen + {v});

proc LiftController(huidige_verdieping: Verdieping, tedoen: Set(Verdieping), richting: Richting, versnelling: Versnelling, deur: Deur) =
  BeheerPaneel(tedoen, richting, versnelling) ||
  DeurenComponent(versnelling, deur) ||
  SchachtMotor(huidige_verdieping, huidige_verdieping, versnelling, richting) ||
  StrategieComponent(versnelling, richting);

  init allow({
    deursensor_trigger,
    lift_benadert,
    lift_deur_open,
    lift_deur_dicht,
    verdieping_deur_open,
    verdieping_deur_dicht,
    accelereer,
    vertraag,
    verdieping_verzoek,
    knop_trigger_sos,
    knop_stop_sos,
    knop_deur_open,
    knop_deur_dicht,
    lift_oproep,
    c_stop_bij},
         comm({s_stop_bij|r_stop_bij->c_stop_bij},
           LiftController(etage_1, {}, boven, stilstaan, gesloten)
       ));
